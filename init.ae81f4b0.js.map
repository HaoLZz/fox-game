{"version":3,"sources":["constants.js","ui.js","gameState.js","button.js","init.js"],"names":["DEAD_STATE","ICONS","TICK_RATE","SCENES","RAIN_CHANCE","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","scene","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToEndCelebrating","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","startGame","determineFoxState","clearTimes","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","target","contains","init","nextTimeToTick","Date","now","nextAnimationFrame","game","requestAnimationFrame"],"mappings":"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","file":"init.ae81f4b0.js","sourceRoot":"../src","sourcesContent":["export const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const TICK_RATE = 3000;\nexport const SCENES = [\"sunny\", \"rain\"];\nexport const RAIN_CHANCE = 0.2;\n\nexport const DAY_LENGTH = 40;\nexport const NIGHT_LENGTH = 20;\n\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 3) + 3 + clock;\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\n\nconst DEAD_STATE = [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"];\nexport default DEAD_STATE;\n","// Helper functions to modify UI DOM elements\n\nexport const modFox = function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\n\nexport const modScene = function modScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\n\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n};\n\nexport const writeModal = function writeModal(text = \"\") {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import DEAD_STATE, {\n  SCENES,\n  RAIN_CHANCE,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungerTime,\n  getNextDieTime,\n  getNextPoopTime,\n} from \"./constants\";\nimport { modFox, modScene, togglePoopBag, writeModal } from \"./ui\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  scene: 0,\n  hungryTime: -1,\n  dieTime: -1,\n  poopTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  tick() {\n    this.clock++;\n    console.log(this.clock);\n\n    switch (this.clock) {\n      case this.wakeTime:\n        this.wake();\n        break;\n      case this.sleepTime:\n        this.sleep();\n        break;\n      case this.hungryTime:\n        this.getHungry();\n        break;\n      case this.dieTime:\n        this.die();\n        break;\n      case this.timeToStartCelebrating:\n        this.startCelebrating();\n        break;\n      case this.timeToEndCelebrating:\n        this.endCelebrating();\n        break;\n      case this.poopTime:\n        this.poop();\n        break;\n    }\n\n    return this.clock;\n  },\n  startGame() {\n    console.log(\"hatching\");\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    writeModal(\"\");\n  },\n  wake() {\n    console.log(\"hatched \" + \" day\");\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    modFox(\"idling\");\n    // Determine if the first scene will be RAIN\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  sleep() {\n    this.current = \"SLEEP\";\n    this.determineFoxState();\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    console.log(\"fox is now hungry\");\n    this.dieTime = getNextDieTime(this.clock);\n    console.log(\"Next die time:\", this.dieTime);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  die() {\n    console.log(\"die\");\n    this.current = \"DEAD\";\n    modFox(\"dead\");\n    modScene(\"dead\");\n    this.clearTimes();\n    writeModal(\n      \"The fox died: ( </br> Press the middle button to restart the game)\"\n    );\n  },\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n    console.log(this.timeToEndCelebrating);\n  },\n  endCelebrating() {\n    console.log(\"celebration ended\");\n    this.timeToEndCelebrating = -1;\n    this.current = \"IDLING\";\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  poop() {\n    this.current = \"POOPING\";\n    console.log(\"Fox needs to poop\");\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    console.log(\"Next die time:\", this.dieTime);\n    modFox(\"pooping\");\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n\n    if (this.current === \"SLEEP\") {\n      modFox(\"sleep\");\n      modScene(\"night\");\n    }\n  },\n  handleUserAction(icon) {\n    console.log(\"current icon is:\", icon);\n    if (DEAD_STATE.includes(this.current)) {\n      // do nothing when in DEAD_STATE.\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n\n    // execute the currently selected action\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather() {\n    console.log(\"changeWeather\");\n    this.scene = (1 + this.scene) % SCENES.length;\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop() {\n    console.log(\"cleanUpPoop\");\n    if (this.current === \"POOPING\") {\n      this.dieTime = -1;\n      togglePoopBag(true);\n      this.startCelebrating();\n      this.hungryTime = getNextHungerTime(this.clock);\n    }\n  },\n  feed() {\n    // can only feed when hungry\n    if (this.current !== \"HUNGRY\") {\n      return;\n    }\n    console.log(\"fox is eating now\");\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    console.log(\"next time to poop\", this.poopTime);\n    modFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n};\n\nexport default gameState;\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\n","// Handle buttons switching and user click\n\nimport { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, show) =>\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n  // adding event listener to buttons.\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import game, {\n  handleUserAction\n} from \"./gameState\";\nimport initButtons from \"./button\";\n\nimport {\n  TICK_RATE\n} from \"./constants\";\n\nasync function init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n  let nextTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n    if (nextTimeToTick <= now) {\n      game.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  nextAnimationFrame();\n}\n\ninit();\n"]}